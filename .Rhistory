facet_wrap(~ feature, scales = "free") +
# Set the x-axis label as "Group" and y-axis label as "Value"
labs(x = "Group", y = "Value")
timepass <- NSII_SCFA_Urine_Normalised_Scaled %>%
gather(key = "feature", value = "value", -Sample, -Month, -ID, -Type)
View(timepass)
# Box plot of comparative analysis for each group (Mother, PI, TI)
timepass <- NSII_SCFA_Urine_Normalised_Scaled %>%
gather(key = "feature", value = "value", -Sample, -Month, -ID, -Type, -NewClass)
View(timepass)
# Box plot of comparative analysis for each group (Mother, PI, TI)
# Convert the data to long format using gather()
NSII_SCFA_Urine_Normalised_Scaled %>%
gather(key = "feature", value = "value", -Sample, -Month, -ID, -Type, -NewClass) %>%
# Create a boxplot using ggplot
ggplot(aes(x = NewClass, y = value, fill = NewClass)) +
geom_boxplot() +
# Create separate plots for each feature using facet_wrap()
facet_wrap(~ feature, scales = "free") +
# Set the x-axis label as "Group" and y-axis label as "Value"
labs(x = "Group", y = "Value")
# Remove the features which as large no of outliers seen in above box plot
NSII_SCFA_Urine_Normalised <- NSII_SCFA_Urine_Normalised %>%
select(-Isovaleric)
# Remove the features which as large no of outliers seen in above box plot
NSII_SCFA_Urine_Normalised_Scaled <- NSII_SCFA_Urine_Normalised_Scaled %>%
select(-Isovaleric)
# Perform PCA on the Normalised data
NSII_SCFA_Urine_Normalised_pca <- prcomp(NSII_SCFA_Urine_Normalised_Scaled[2:11], scale = TRUE, center = TRUE)
# Visualization of PCA
# Plot the individuals (samples) in the PCA space
fviz_pca_ind(NSII_SCFA_Urine_Normalised_pca,
geom = "point",
habillage = NSII_SCFA_Urine_Normalised$NewNewClass,
palette = c("blue", "red", "green"),
addEllipses = FALSE,
ggtheme = theme_bw(),
title = "PCA plot for SCFA biomarkers")
# Perform PCA on the Normalised data
NSII_SCFA_Urine_Normalised_pca <- prcomp(NSII_SCFA_Urine_Normalised_Scaled[2:11], scale = TRUE, center = TRUE)
# Visualization of PCA
# Plot the individuals (samples) in the PCA space
fviz_pca_ind(NSII_SCFA_Urine_Normalised_pca,
geom = "point",
habillage = NSII_SCFA_Urine_Normalised_Scaled$NewClass,
palette = c("blue", "red", "green"),
addEllipses = FALSE,
ggtheme = theme_bw(),
title = "PCA plot for SCFA biomarkers")
# Scree plot to visualize the explained variance by each principal component
fviz_eig(NSII_SCFA_Urine_Normalised_pca,
addlabels = TRUE,
ylim = c(0, 70),
main = "Scree Plot SCFA Data")
# Graph showing the contribution of variables to each principal component
fviz_pca_var(NSII_SCFA_Urine_Normalised_pca, col_var = "red")
var <- get_pca_var(NSII_SCFA_Urine_Normalised_pca)
PC1<-fviz_contrib(NSII_SCFA_Urine_Normalised_pca, "var", axes=1, xtickslab.rt=90)
PC2<-fviz_contrib(NSII_SCFA_Urine_Normalised_pca, "var", axes=2, xtickslab.rt=90)
PC3<-fviz_contrib(NSII_SCFA_Urine_Normalised_pca, "var", axes=3, xtickslab.rt=90)
PC4<-fviz_contrib(NSII_SCFA_Urine_Normalised_pca, "var", axes=4, xtickslab.rt=90)
PC5<-fviz_contrib(NSII_SCFA_Urine_Normalised_pca, "var", axes=5, xtickslab.rt=90)
plot(PC1,main = "Variables percentage contribution of first Principal Components")
plot(PC2,main = "Variables percentage contribution of Second Principal Components")
plot(PC3,main = "Variables percentage contribution of Third Principal Components")
plot(PC4,main = "Variables percentage contribution of Fourth Principal Components")
plot(PC5,main = "Variables percentage contribution of Fifth Principal Components")
# Calculate p-values for each correlation coefficient
p_mat <- cor_pmat(NSII_SCFA_Urine_Normalised[3:10], method = "pearson")
# Calculate correlation matrix using Pearson correlation
correlationMatrix <- cor(NSII_SCFA_Urine_Normalised[3:10], method = "pearson")
# Visualize the correlation matrix using ggcorrplot
ggcorrplot(
correlationMatrix,
hc.order = FALSE,   # Hierarchical clustering for reordering variables
type = "lower",    # Show only the lower triangle of the correlation matrix
lab = TRUE,        # Show labels for variables
p.mat = p_mat,      # Overlay p-values on the plot
sig.level = 0.05,
)
# Calculate p-values for each correlation coefficient
p_mat <- cor_pmat(NSII_SCFA_Urine_Normalised_Scaled[3:10], method = "pearson")
# Calculate correlation matrix using Pearson correlation
correlationMatrix <- cor(NSII_SCFA_Urine_Normalised_Scaled[3:10], method = "pearson")
# Visualize the correlation matrix using ggcorrplot
ggcorrplot(
correlationMatrix,
hc.order = FALSE,   # Hierarchical clustering for reordering variables
type = "lower",    # Show only the lower triangle of the correlation matrix
lab = TRUE,        # Show labels for variables
p.mat = p_mat,      # Overlay p-values on the plot
sig.level = 0.05,
)
# Performing Covariance
cov_df <- cov(NSII_SCFA_Urine_Normalised_Scaled[sapply(NSII_SCFA_Urine_Normalised_Scaled,is.numeric)], method = "pearson")
# Covnverting Covariance to Correlation
cov_df <- cov2cor(cov_df)
cov_df_long <- melt(cov_df)
# Create the covariance plot using ggplot2
plot <- ggplot(cov_df_long, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(high = "red", low = "white") +
geom_text(aes(label = paste0(round(value * 100, 2))), color = "black", size = 3) +
labs(title = "Covariance Heatmap",
x = "Variable 1",
y = "Variable 2")
print(plot)
# Sapiro test
for (vars in continuous_vars) {
data_vector <- NSII_SCFA_Urine_Normalised[[vars]]
shapiro_result <- shapiro.test(data_vector)
cat("Variable:", vars, "\n")
print(shapiro_result)
cat("\n")
}
library(rstatix)
# Define the Continuous Variables and Categorial Variable
continuous_vars <- colnames(NSII_SCFA_Urine_Normalised[2:11])
categorical_var <- "NewClass"
continuous_vars
# Sapiro test
for (vars in continuous_vars) {
data_vector <- NSII_SCFA_Urine_Normalised[[vars]]
shapiro_result <- shapiro.test(data_vector)
cat("Variable:", vars, "\n")
print(shapiro_result)
cat("\n")
}
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- leveneTest(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:", vars, "/n")
print(var_test)
cat("/n")
}
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- leveneTest(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:", vars, "/n")
print(var_test)
cat("/n")
}
# Perform Kruskal-Wallis test for each variable
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:", vars, "/n")
print(kruskal_model)
cat("/n")
}
# Perform pairwise dunn test and display summary for each model
for (var in continuous_vars) {
formula <- as.formula(paste(var, "~", categorical_var))
pairwise_test <- dunn_test(formula, data = NSII_SCFA_Urine_Normalised, p.adjust.method = "bonferroni")
cat("Variable:", var, "/n")
print(pairwise_test)
cat("/n")
}
Sapiro test
# Initialize an empty data frame to store the results
shapiro_results <- data.frame(Variable = character(0), P_Value = numeric(0), Significant = character(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
data_vector <- NSII_SCFA_Urine_Normalised[[vars]]
shapiro_result <- shapiro.test(data_vector)
# Append the results to the data frame
shapiro_results <- rbind(shapiro_results, data.frame(Variable = vars, P_Value = shapiro_result$p.value, Significant = ifelse(shapiro_result$p.value < 0.05, "Yes", "No")))
}
# Print the results as a table
print(shapiro_results)
View(shapiro_results)
# Initialize an empty data frame to store the results
shapiro_results <- data.frame(Variable = character(0), P_Value = numeric(0), Significant = character(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
data_vector <- NSII_SCFA_Urine_Normalised[[vars]]
shapiro_result <- shapiro.test(data_vector)
# Append the results to the data frame
shapiro_results <- rbind(shapiro_results, data.frame(Variable = vars, P_Value = shapiro_result$p.value, Significant = ifelse(shapiro_result$p.value < 0.05, "**", ".")))
}
# Print the results as a table
print(shapiro_results)
View(shapiro_results)
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), W_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- car::leveneTest(formula, data = NSII_SCFA_Urine_Normalised)
# Append the results to the data frame
levene_results <- rbind(levene_results, data.frame(Variable = vars, W_Value = var_test$statistic, P_Value = var_test$p.value))
}
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), W_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- leveneTest(formula, data = NSII_SCFA_Urine_Normalised)
# Append the results to the data frame
levene_results <- rbind(levene_results, data.frame(Variable = vars, W_Value = var_test$statistic, P_Value = var_test$p.value))
}
View(var_test)
View(levene_results)
library(rstatix)
var_test <- levene_test(formula, data = NSII_SCFA_Urine_Normalised)
View(var_test)
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), W_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- levene_test(formula, data = NSII_SCFA_Urine_Normalised)
# Append the results to the data frame
levene_results <- rbind(levene_results, data.frame(Variable = vars, W_Value = var_test$statistic, P_Value = var_test$p.value))
}
View(var_test)
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), W_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- levene_test(formula, data = NSII_SCFA_Urine_Normalised)
# Append the results to the data frame
#levene_results <- rbind(levene_results, data.frame(Variable = vars, W_Value = var_test$statistic, P_Value = var_test$p.value))
}
# Print the results as a table
print(var_test)
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), W_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- leveneTest(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:", vars, "/n")
print(var_test)
cat("/n")
}
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), W_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- car::leveneTest(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:", vars, "/n")
print(var_test)
cat("/n")
}
View(var_test)
View(var_test)
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), W_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- car::leveneTest(formula, data = NSII_SCFA_Urine_Normalised)
levene_results <- rbind(levene_results, data.frame(Variable = vars, W_Value = var_test$`F value`, P_Value = var_test$`Pr(>F)`, Significant = ifelse(var_test$`Pr(>F)` < 0.05, "**", "-")))
}
levene_results
View(levene_results)
View(var_test)
# perform levene's test to see if all group has equal variance
# Update the levels of the New Class variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), F_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- leveneTest(formula, data = NSII_SCFA_Urine_Normalised)
levene_results <- rbind(levene_results, data.frame(Variable = vars, F_Value = var_test$`F value`, P_Value = var_test$`Pr(>F)`, Significant = ifelse(var_test$`Pr(>F)` < 0.05, "**", "-")))
}
levene_results
View(levene_results)
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:", vars, "/n")
print(kruskal_model)
cat("/n")
}
View(kruskal_model)
kruskal_model[["statistic"]][["Kruskal-Wallis chi-squared"]]
kruskal_model[["parameter"]][["df"]]
kruskal_model[["p.value"]]
kruskal_model$statistic
kruskal_model$p.value
# Perform Kruskal-Wallis test for each variable
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:", vars, "/n")
print(kruskal_model)
cat("/n")
}
# Perform pairwise dunn test and display summary for each model
for (var in continuous_vars) {
formula <- as.formula(paste(var, "~", categorical_var))
pairwise_test <- dunn_test(formula, data = NSII_SCFA_Urine_Normalised, p.adjust.method = "bonferroni")
cat("Variable:", var, "/n")
print(pairwise_test)
cat("/n")
}
# Perform Kruskal-Wallis test for each variable
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:", vars, "/n")
print(kruskal_model)
cat("/n")
}
# Perform pairwise dunn test and display summary for each model
for (var in continuous_vars) {
formula <- as.formula(paste(var, "~", categorical_var))
pairwise_test <- dunn_test(formula, data = NSII_SCFA_Urine_Normalised, p.adjust.method = "bonferroni")
cat("Variable:", var, '/n')
print(pairwise_test)
cat("/n")
}
# Perform Kruskal-Wallis test for each variable
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised_Scaled)
cat("Variable:", vars, "/n")
print(kruskal_model)
cat("/n")
}
# Perform pairwise dunn test and display summary for each model
for (var in continuous_vars) {
formula <- as.formula(paste(var, "~", categorical_var))
pairwise_test <- dunn_test(formula, data = NSII_SCFA_Urine_Normalised_Scaled, p.adjust.method = "bonferroni")
cat("Variable:", var, '/n')
print(pairwise_test)
cat("/n")
}
# Perform Kruskal-Wallis test for each variable
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised_Scaled)
cat("Variable:", vars, "/n")
print(kruskal_model)
cat("/n")
}
# Perform pairwise dunn test and display summary for each model
for (var in continuous_vars) {
formula <- as.formula(paste(var, "~", categorical_var))
pairwise_test <- dunn_test(formula, data = NSII_SCFA_Urine_Normalised_Scaled, p.adjust.method = "bonferroni")
cat("Variable:", var, '/n')
print(pairwise_test)
cat("/n")
}
# Perform Kruskal-Wallis test for each variable
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised_Scaled)
cat("Variable:", vars,)
print(kruskal_model)
cat("/n")
}
# Perform Kruskal-Wallis test for each variable
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised_Scaled)
cat("Variable:", vars)
print(kruskal_model)
cat("/n")
}
# Perform pairwise dunn test and display summary for each model
for (var in continuous_vars) {
formula <- as.formula(paste(var, "~", categorical_var))
pairwise_test <- dunn_test(formula, data = NSII_SCFA_Urine_Normalised_Scaled, p.adjust.method = "bonferroni")
cat("Variable:", var)
print(pairwise_test)
cat("/n")
}
# Perform Kruskal-Wallis test for each variable
# Initialize an empty data frame to store the Kruskal-Wallis results
kruskal_results <- data.frame(Variable = character(0), H_Statistic = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised_Scaled)
# Append the results to the data frame
kruskal_results <- rbind(kruskal_model, data.frame(Variable = vars, H_Statistic = kruskal_model$statistic, P_Value = kruskal_model$p.value,Significant = ifelse(kruskal_model$p.value < 0.05, "**", "-")))
}
# Perform Kruskal-Wallis test for each variable
# Initialize an empty data frame to store the Kruskal-Wallis results
kruskal_results <- data.frame(Variable = character(0), H_Statistic = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_SCFA_Urine_Normalised_Scaled)
# Append the results to the data frame
kruskal_results <- rbind(kruskal_results, data.frame(Variable = vars, H_Statistic = kruskal_model$statistic, P_Value = kruskal_model$p.value, Significant = ifelse(kruskal_model$p.value < 0.05, "**", "-")))
}
print(kruskal_results)
# Perform pairwise dunn test and display summary for each model
for (var in continuous_vars) {
formula <- as.formula(paste(var, "~", categorical_var))
pairwise_test <- dunn_test(formula, data = NSII_SCFA_Urine_Normalised_Scaled, p.adjust.method = "bonferroni")
cat("Variable:", var)
print(pairwise_test)
cat("/n")
}
# Perform Regression for each continuous variable
for (Vars in continuous_vars) {
formula <- as.formula(paste(Vars, "~", categorical_var))
LM_model <- lm(formula, data = NSII_SCFA_Urine_Normalised)
cat("Variable:",Vars, "/n")
print(summary(LM_model))
cat("/n")
}
# Perform Regression for each continuous variable
for (Vars in continuous_vars) {
formula <- as.formula(paste(Vars, "~", categorical_var))
LM_model <- lm(formula, data = NSII_SCFA_Urine_Normalised_Scaled)
cat("Variable:",Vars, "/n")
print(summary(LM_model))
cat("/n")
}
set.seed(123)
# Update the levels of the NewClass variable
NSII_SCFA_Urine_Normalised$NewClass <- factor(NSII_SCFA_Urine_Normalised$NewClass)
# Define the control for recursive feature elimination (RFE) using random forest
control <- rfeControl(functions = rfFuncs, method = "cv", number = 10)
# Run the RFE algorithm
results <- rfe(NSII_SCFA_Urine_Normalised[, 2:11], NSII_SCFA_Urine_Normalised[, 15], sizes = c(1:8), rfeControl = control)
View(NSII_SCFA_Urine_Normalised_Scaled)
set.seed(123)
# Update the levels of the NewClass variable
NSII_SCFA_Urine_Normalised_Scaled$NewClass <- factor(NSII_SCFA_Urine_Normalised_Scaled$NewClass)
# Define the control for recursive feature elimination (RFE) using random forest
control <- rfeControl(functions = rfFuncs, method = "cv", number = 10)
# Run the RFE algorithm
results <- rfe(NSII_SCFA_Urine_Normalised_Scaled[, 2:11], NSII_SCFA_Urine_Normalised_Scaled[, 15], sizes = c(1:8), rfeControl = control)
# Summarize the results
print(results)
# List the chosen features selected by RFE
predictors(results)
library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(NewClass ~ ., data=na.omit(NSII_SCFA_Urine_Normalised_Scaled), doTrace = 2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% c("Confirmed", "Tentative")])  # collect Confirmed and Tentative variables
plot(boruta_output, cex_axis=7, las=2, xlab="", main="Variable Importance")  # plot variable
library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(NewClass ~ ., data = na.omit(NSII_SCFA_Urine_Normalised_Scaled[2:11]), doTrace = 2)  # perform Boruta search
set.seed(123)
# Update the levels of the NewClass variable
NSII_SCFA_Urine_Normalised_Scaled$NewClass <- factor(NSII_SCFA_Urine_Normalised_Scaled$NewClass)
# Define the control for recursive feature elimination (RFE) using random forest
control <- rfeControl(functions = rfFuncs, method = "cv", number = 10)
# Run the RFE algorithm
results <- rfe(NSII_SCFA_Urine_Normalised_Scaled[, 2:11], NSII_SCFA_Urine_Normalised_Scaled[, 15], sizes = c(1:8), rfeControl = control)
# Summarize the results
print(results)
# List the chosen features selected by RFE
predictors(results)
library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(NewClass ~ ., data = na.omit(NSII_SCFA_Urine_Normalised_Scaled), doTrace = 2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% c("Confirmed", "Tentative")])  # collect Confirmed and Tentative variables
plot(boruta_output, cex_axis=7, las=2, xlab="", main="Variable Importance")  # plot variable
# Load required libraries
library(ggstatsplot)
library(rlang)
# Define the custom function StatBoxplot
StatBoxplot <- function(y) {
y_sym <- sym(y)
plot <- ggbetweenstats(
data = NSII_SCFA_Urine_Normalised_Scaled,
x = NewClass,
y = !!y_sym,
type = "parametric",
plot.type = "box",
pairwise.comparisons = TRUE,
pairwise.display = "all",
centrality.plotting = FALSE,
bf.message = FALSE,
ylab = y
)
return(plot)
}
variables <- colnames(NSII_SCFA_Urine_Normalised)[2:11]
# Call the StatBoxplot function for each variable in the variables vector
for (Var in variables) {
plot <- StatBoxplot(Var)
print(plot) # If you want to see each plot, use print() to display them.
}
