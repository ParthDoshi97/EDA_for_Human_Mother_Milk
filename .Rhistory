Actual_vs_predicted_plot(prediction.pls.enose.tvc$predict[,1],
testSet1.tvc$TVC,
"pls Predicted log10 TVC",
"pls Actual log10 TVC",
paste("PLS Rmse",Rmse.pls.enose.mean))
# HPLC Data
HPLC_data  <- import_HPLC_Data_regression("HPLC_data-1.csv","Bacterial_Counts-1.csv")
HPLC_tvc=HPLC_data%>%select(-Pseudomonads)
HPLC_Pseudomonads=HPLC_data%>%select(-TVC)
# hyperyParameter Values for HPLC for both the bacterial count
set.seed(8)
# K value for KNN
tvc.k.value(HPLC_tvc)
pseudo.k.value(HPLC_Pseudomonads)
# mtry value for Randam Forest
mtry.tvc(HPLC_tvc)
mtry.pseudo(HPLC_Pseudomonads)
# ncomp value For PLS-R
ncomp.TVC(HPLC_tvc)
ncomp.Pseudo(HPLC_Pseudomonads)
# Regression model for 100 itration of each method for
# enose data for both BActerial  count
Rmsevalue.TVC.hplc <- Regression_model_TVC(HPLC_tvc,5,3,2) # RMSE value for all method
Rmsevalues.Pseudomonads.hplc <-Regression_model_Pseudomonads(HPLC_Pseudomonads,
2,5,2) # RMSE value for all method
# Getting Overall RMSE value for all methods and
# Standard Devation And CI %95 for TVC Bacterial Count
# Knn
print("Knn TVC")
Rmse.knn.HPLC.TVC <- as.vector(Rmsevalue.TVC.hplc[[1]])
Rmse.knn.HPLC.TVC.mean <- mean(Rmse.knn.HPLC.TVC) # Mean Rmse value
cat("Mean =",Rmse.knn.HPLC.TVC.mean)
Rmse.knn.HPLC.TVC.sd <- sd(Rmse.knn.HPLC.TVC) # Standard Devation
cat(" Standard Devation =",Rmse.knn.HPLC.TVC.sd)
Rmse.knn.HPLC.TVC.C1 <- t.test(Rmse.knn.HPLC.TVC,conf.level = 0.95) # CI 95 %
Rmse.knn.HPLC.TVC.C1
# Random Forest
print("Random Forest TVC")
Rmse.rf.HPLC.TVC <- as.vector(Rmsevalue.TVC.hplc[[2]])
Rmse.rf.HPLC.TVC.mean <- mean(Rmse.rf.HPLC.TVC) # Mean Rmse value
cat("Mean =",Rmse.rf.HPLC.TVC.mean)
Rmse.rf.HPLC.TVC.sd <- sd(Rmse.rf.HPLC.TVC) # Standard Devation
cat(" Standard Devation =",Rmse.rf.HPLC.TVC.sd)
Rmse.rf.HPLC.TVC.C1 <- t.test(Rmse.rf.HPLC.TVC,conf.level = 0.95) # CI 95 %
Rmse.rf.HPLC.TVC.C1
# PlS R
print("PLS-R TVC")
Rmse.pls.HPLC.TVC <- as.vector(Rmsevalue.TVC.hplc[[3]])
Rmse.pls.HPLC.TVC.mean <- mean(Rmse.pls.HPLC.TVC) # Mean Rmse value
cat("Mean =",Rmse.pls.HPLC.TVC.mean)
Rmse.pls.HPLC.TVC.sd <- sd(Rmse.pls.HPLC.TVC) # Standard Devation
cat(" Standard Devation =",Rmse.pls.HPLC.TVC.sd)
Rmse.pls.HPLC.TVC.C1 <- t.test(Rmse.pls.HPLC.TVC,conf.level = 0.95) # CI 95 %
Rmse.pls.HPLC.TVC.C1
# Getting Overall RMSE value for all methods and
# Standard Devation And CI %95 for Pseudomonads Bacterial Count
# Knn
print("Knn Pseudomonads")
Rmse.knn.Pseudomonads.HPLC <- as.vector(Rmsevalues.Pseudomonads.hplc[[1]])
Rmse.knn.Pseudomonads.HPLC.mean <- mean(Rmse.knn.Pseudomonads.HPLC) # Mean Rmse value
cat("Mean =",Rmse.knn.Pseudomonads.HPLC.mean)
Rmse.knn.Pseudomonads.HPLC.sd <- sd(Rmse.knn.Pseudomonads.HPLC) # Standard Devation
Rmse.knn.Pseudomonads.HPLC.sd
Rmse.knn.Pseudomonads.HPLC.C1 <- t.test(Rmse.knn.Pseudomonads.HPLC,conf.level = 0.95) # CI 95 %
Rmse.knn.Pseudomonads.HPLC.C1
# Random Forest
print("Random Forest Pseudomonads")
Rmse.rf.Pseudomonads.HPLC <- as.vector(Rmsevalues.Pseudomonads.hplc[[2]])
Rmse.rf.Pseudomonads.HPLC.mean <- mean(Rmse.rf.Pseudomonads.HPLC) # Mean Rmse value
cat("Mean =",Rmse.rf.Pseudomonads.HPLC.mean)
Rmse.rf.Pseudomonads.HPLC.sd <- sd(Rmse.rf.Pseudomonads.HPLC) # Standard Devation
cat(" Standard Devation =",Rmse.rf.Pseudomonads.HPLC.sd)
Rmse.rf.Pseudomonads.HPLC.C1 <- t.test(Rmse.rf.Pseudomonads.HPLC,conf.level = 0.95) # CI 95 %
Rmse.rf.Pseudomonads.HPLC.C1
# Pls R
print("PLS-R Pseudomonads")
Rmse.pls.Pseudomonads.HPLC <- as.vector(Rmsevalues.Pseudomonads.hplc[[3]])
Rmse.pls.Pseudomonads.HPLC.mean <- mean(Rmse.pls.Pseudomonads.HPLC) # Mean Rmse value
cat("Mean =", Rmse.pls.Pseudomonads.HPLC.mean)
Rmse.pls.Pseudomonads.HPLC.sd <- sd(Rmse.pls.Pseudomonads.HPLC) # Standard Devation
cat(" Standard Devation =",Rmse.pls.Pseudomonads.HPLC.sd)
Rmse.pls.Pseudomonads.HPLC.C1 <- t.test(Rmse.pls.Pseudomonads.HPLC,conf.level = 0.95) # CI 95 %
Rmse.pls.Pseudomonads.HPLC.C1
# Regression model for 100 itration of each method for
# enose data for both BActerial  count
Rmsevalue_TVC <- Regression_model_TVC(Enose_tvc,5,3,2) # RMSE value for all method
Rmsevalues_Pseudomonads <-Regression_model_Pseudomonads(Enose_Pseudomonads,
5,3,1) # RMSE value for all method
# Getting Overall RMSE value for all methods and
# Standard Devation And CI %95 for TVC Bacterial Count
# Knn
print("Knn TVC")
Rmse.knn.enose <- as.vector(Rmsevalue_TVC[[1]])
Rmse.knn.enose.mean <- mean(Rmse.knn.enose) # Mean Rmse value
cat("Mean =",Rmse.knn.enose.mean)
Rmse.knn.enos.sd <- sd(Rmse.knn.enose) # Standard Devation
cat(" Standard Devation =",Rmse.knn.enos.sd)
Rmse.knn.enose.C1 <- t.test(Rmse.knn.enose,conf.level = 0.95) # CI 95 %
Rmse.knn.enose.C1
# Random Forest
print("Random Forest TVC")
Rmse.rf.enose <- as.vector(Rmsevalue_TVC[[2]])
Rmse.rf.enose.mean <- mean(Rmse.rf.enose) # Mean Rmse value
cat("Mean =",Rmse.rf.enose.mean)
Rmse.rf.enos.sd <- sd(Rmse.rf.enose) # Standard Devation
cat(" Standard Devation =",Rmse.rf.enos.sd)
Rmse.rf.enose.C1 <- t.test(Rmse.rf.enose,conf.level = 0.95) # CI 95 %
Rmse.rf.enose.C1
# PlS R
print("PLS-R TVC")
Rmse.pls.enose <- as.vector(Rmsevalue_TVC[[3]])
Rmse.pls.enose.mean <- mean(Rmse.pls.enose) # Mean Rmse value
cat("Mean =",Rmse.pls.enose.mean)
Rmse.pls.enos.sd <- sd(Rmse.pls.enose) # Standard Devation
cat(" Standard Devation =",Rmse.pls.enos.sd)
Rmse.pls.enose.C1 <- t.test(Rmse.pls.enose,conf.level = 0.95) # CI 95 %
Rmse.pls.enose.C1
# Getting Overall RMSE value for all methods and
# Standard Devation And CI %95 for Pseudomonads Bacterial Count
# Knn
print("Knn Pseudomonads")
Rmse.knn.Pseudomonads <- as.vector(Rmsevalues_Pseudomonads[[1]])
Rmse.knn.Pseudomonads.mean <- mean(Rmse.knn.Pseudomonads) # Mean Rmse value
cat("Mean =",Rmse.knn.Pseudomonads.mean)
Rmse.knn.Pseudomonads.sd <- sd(Rmse.knn.Pseudomonads) # Standard Devation
cat(" Standard devation=",Rmse.knn.Pseudomonads.sd)
Rmse.knn.Pseudomonads.C1 <- t.test(Rmse.knn.Pseudomonads,conf.level = 0.95) # CI 95 %
Rmse.knn.Pseudomonads.C1
# Random Forest
print("Random Forest Pseudomonads")
Rmse.rf.Pseudomonads <- as.vector(Rmsevalues_Pseudomonads[[2]])
Rmse.rf.Pseudomonads.mean <- mean(Rmse.rf.Pseudomonads) # Mean Rmse value
cat("Mean =",Rmse.rf.Pseudomonads.mean)
Rmse.rf.Pseudomonads.sd <- sd(Rmse.rf.Pseudomonads) # Standard Devation
cat(" Standard Devation =",Rmse.rf.Pseudomonads.sd)
Rmse.rf.Pseudomonads.C1 <- t.test(Rmse.rf.Pseudomonads,conf.level = 0.95) # CI 95 %
Rmse.rf.Pseudomonads.C1
# Pls R
print("PLS-R Pseudomonads")
Rmse.pls.Pseudomonads <- as.vector(Rmsevalues_Pseudomonads[[3]])
Rmse.pls.Pseudomonads.mean <- mean(Rmse.pls.Pseudomonads) # Mean Rmse value
cat("Mean =", Rmse.pls.Pseudomonads.mean)
Rmse.pls.Pseudomonads.sd <- sd(Rmse.pls.Pseudomonads) # Standard Devation
cat(" Standard Devation =",Rmse.pls.Pseudomonads.sd)
Rmse.pls.Pseudomonads.C1 <- t.test(Rmse.pls.Pseudomonads,conf.level = 0.95) # CI 95 %
Rmse.pls.Pseudomonads.C1
# Tvc Bacterial count and HPLC data #
## split the data into train and test for both bacterial count
set.seed(123)
trainIndexnew1 <- createDataPartition(HPLC_tvc$TVC, p = .7,
list = FALSE, times = 1)
#Create training set and test set for Enose dataset
trainSet1new.tvc<- HPLC_tvc[trainIndex1,]
testSet1new.tvc<- HPLC_tvc[-trainIndex1,]
# Pseudomonads bacterial count and enose data #
set.seed(123)
trainIndex2 <- createDataPartition(HPLC_Pseudomonads$Pseudomonads, p = .7,
list = FALSE, times = 1)
#Create training set and test set for Enose dataset
trainSet1new.pseudo<- HPLC_Pseudomonads[trainIndex2,]
testSet1new.pseudo<- HPLC_Pseudomonads[-trainIndex2,]
# fitting regression model
# tvc bacterial count
# knn model
HPLC.knn.fit.TVC <- knnreg(TVC~., trainSet1new.tvc, k=5)
predication.knn.HPLC.tvc <- predict(HPLC.knn.fit.TVC, testSet1new.tvc)
# Random Forest
HPLC.rf.fit.TVC <- randomForest(TVC~., trainSet1new.tvc,
mtry = 3,
type = "regression")
prediction.rf.HPLC.tvc <- predict(HPLC.rf.fit.TVC,testSet1new.tvc)
# PLS-R model
HPLC.pls.fit.TVC <- pls(trainSet1new.tvc, trainSet1new.tvc$TVC,
ncomp = 2, mode ="regression" )
prediction.pls.HPLC.tvc <- predict(HPLC.pls.fit.TVC, testSet1new.tvc)
# Pseudomonads bacterial count
# knn model
HPLC.knn.fit.Pseudomonads <- knnreg(Pseudomonads~., trainSet1new.pseudo, k=3)
predication.knn.HPLC.Pseudomonads <- predict(HPLC.knn.fit.Pseudomonads, testSet1new.pseudo)
# Random Forest
HPLC.rf.fit.Pseudomonads <- randomForest(Pseudomonads~., trainSet1new.pseudo, mtry = 5, type="regression")
prediction.rf.HPLC.Pseudomonads <- predict(HPLC.rf.fit.Pseudomonads,testSet1new.pseudo)
# PLS-R model
HPLC.pls.fit.Pseudomonads <- pls(trainSet1new.pseudo, trainSet1new.pseudo$Pseudomonads,
ncomp = 2,mode ="regression" )
prediction.pls.HPLC.Pseudomonads <- predict(HPLC.pls.fit.Pseudomonads, testSet1new.pseudo)
View(HPLC.rf.fit.TVC)
# Regression model for 100 itration of each method for
# enose data for both BActerial  count
Rmsevalue_TVC <- Regression_model_TVC(Enose_tvc,5,3,2) # RMSE value for all method
Rmsevalues_Pseudomonads <-Regression_model_Pseudomonads(Enose_Pseudomonads,
5,3,1) # RMSE value for all method
# Getting Overall RMSE value for all methods and
# Standard Devation And CI %95 for TVC Bacterial Count
# Knn
print("Knn TVC")
Rmse.knn.enose <- as.vector(Rmsevalue_TVC[[1]])
Rmse.knn.enose.mean <- mean(Rmse.knn.enose) # Mean Rmse value
cat("Mean =",Rmse.knn.enose.mean)
Rmse.knn.enos.sd <- sd(Rmse.knn.enose) # Standard Devation
cat(" Standard Devation =",Rmse.knn.enos.sd)
Rmse.knn.enose.C1 <- t.test(Rmse.knn.enose,conf.level = 0.95) # CI 95 %
Rmse.knn.enose.C1
# Random Forest
print("Random Forest TVC")
Rmse.rf.enose <- as.vector(Rmsevalue_TVC[[2]])
Rmse.rf.enose.mean <- mean(Rmse.rf.enose) # Mean Rmse value
cat("Mean =",Rmse.rf.enose.mean)
Rmse.rf.enos.sd <- sd(Rmse.rf.enose) # Standard Devation
cat(" Standard Devation =",Rmse.rf.enos.sd)
Rmse.rf.enose.C1 <- t.test(Rmse.rf.enose,conf.level = 0.95) # CI 95 %
Rmse.rf.enose.C1
# PlS R
print("PLS-R TVC")
Rmse.pls.enose <- as.vector(Rmsevalue_TVC[[3]])
Rmse.pls.enose.mean <- mean(Rmse.pls.enose) # Mean Rmse value
cat("Mean =",Rmse.pls.enose.mean)
Rmse.pls.enos.sd <- sd(Rmse.pls.enose) # Standard Devation
cat(" Standard Devation =",Rmse.pls.enos.sd)
Rmse.pls.enose.C1 <- t.test(Rmse.pls.enose,conf.level = 0.95) # CI 95 %
Rmse.pls.enose.C1
# Getting Overall RMSE value for all methods and
# Standard Devation And CI %95 for Pseudomonads Bacterial Count
# Knn
print("Knn Pseudomonads")
Rmse.knn.Pseudomonads <- as.vector(Rmsevalues_Pseudomonads[[1]])
Rmse.knn.Pseudomonads.mean <- mean(Rmse.knn.Pseudomonads) # Mean Rmse value
cat("Mean =",Rmse.knn.Pseudomonads.mean)
Rmse.knn.Pseudomonads.sd <- sd(Rmse.knn.Pseudomonads)
cat(" SD =",Rmse.knn.Pseudomonads.sd)
Rmse.knn.Pseudomonads.C1 <- t.test(Rmse.knn.Pseudomonads,conf.level = 0.95) # CI 95 %
Rmse.knn.Pseudomonads.C1
# Random Forest
print("Random Forest Pseudomonads")
Rmse.rf.Pseudomonads <- as.vector(Rmsevalues_Pseudomonads[[2]])
Rmse.rf.Pseudomonads.mean <- mean(Rmse.rf.Pseudomonads) # Mean Rmse value
cat("Mean =",Rmse.rf.Pseudomonads.mean)
Rmse.rf.Pseudomonads.sd <- sd(Rmse.rf.Pseudomonads) # Standard Devation
cat(" Standard Devation =",Rmse.rf.Pseudomonads.sd)
Rmse.rf.Pseudomonads.C1 <- t.test(Rmse.rf.Pseudomonads,conf.level = 0.95) # CI 95 %
Rmse.rf.Pseudomonads.C1
# Pls R
print("PLS-R Pseudomonads")
Rmse.pls.Pseudomonads <- as.vector(Rmsevalues_Pseudomonads[[3]])
Rmse.pls.Pseudomonads.mean <- mean(Rmse.pls.Pseudomonads) # Mean Rmse value
cat("Mean =", Rmse.pls.Pseudomonads.mean)
Rmse.pls.Pseudomonads.sd <- sd(Rmse.pls.Pseudomonads) # Standard Devation
cat(" Standard Devation =",Rmse.pls.Pseudomonads.sd)
Rmse.pls.Pseudomonads.C1 <- t.test(Rmse.pls.Pseudomonads,conf.level = 0.95) # CI 95 %
Rmse.pls.Pseudomonads.C1
# Actual vs predicte for TVC Bacterial count
# knn
Actual_vs_predicted_plot(predication.knn.enose.tvc,
testSet1.tvc$TVC,
"Knn Predicted log10 TVC",
"knn Actual log10 TVC",
paste("Knn Rmse",Rmse.knn.enose.mean))
Actual_vs_predicted_plot(prediction.rf.enose.tvc,
testSet1.tvc$TVC,
"RF Predicted log10 TVC",
"RF Actual log10 TVC",
paste("RN Rmse",Rmse.rf.enose.mean))
source('plot_graph.r')
# Actual vs predicte for TVC Bacterial count
# knn
Actual_vs_predicted_plot(predication.knn.enose.tvc,
testSet1.tvc$TVC,
"Knn Predicted log10 TVC",
"knn Actual log10 TVC",
paste("Knn Rmse",Rmse.knn.enose.mean))
Actual_vs_predicted_plot(prediction.rf.enose.tvc,
testSet1.tvc$TVC,
"RF Predicted log10 TVC",
"RF Actual log10 TVC",
paste("RN Rmse",Rmse.rf.enose.mean))
x11()
Actual_vs_predicted_plot(predication.knn.enose.Pseudomonads,
testSet1.pseudo$Pseudomonads,
"Knn Predicted log10 pseudomonas",
"knn Actual log10 TVC",
paste("Knn Rmse",Rmse.knn.Pseudomonads.mean))
x11()
Actual_vs_predicted_plot(prediction.rf.enose.Pseudomonads,
testSet1.pseudo$Pseudomonads,
"RF Predicted log10 psuedomonas",
"RF Actual log10 TVC",
paste("RN Rmse",Rmse.rf.Pseudomonads.mean))
x11()
Actual_vs_predicted_plot(prediction.rf.enose.Pseudomonads,
testSet1.pseudo$Pseudomonads,
"RF Predicted log10 psuedomonas",
"RF Actual log10 TVC",
paste("RN Rmse",Rmse.rf.Pseudomonads.mean))
Actual_vs_predicted_plot(prediction.rf.enose.Pseudomonads,
testSet1.pseudo$Pseudomonads,
"RF Predicted log10 psuedomonas",
"RF Actual log10 TVC",
paste("RN Rmse",Rmse.rf.Pseudomonads.mean))
x11()
Actual_vs_predicted_plot(predication.knn.HPLC.tvc,
estSet1new.tvc$TVC,
"Knn Predicted log10 TVC",
"knn Actual log10 TVC",
paste("Knn Rmse",Rmse.knn.enose.mean))
x11()
Actual_vs_predicted_plot(predication.knn.HPLC.tvc,
testSet1new.tvc$TVC,
"Knn Predicted log10 TVC",
"knn Actual log10 TVC",
paste("Knn Rmse",Rmse.knn.enose.mean))
x11()
Actual_vs_predicted_plot(predication.knn.HPLC.tvc,
testSet1new.tvc$TVC,
"Knn Predicted log10 TVC",
"knn Actual log10 TVC",
paste("Knn Rmse",Rmse.knn.enose.mean))
x11()
Actual_vs_predicted_plot(predication.knn.HPLC.tvc,
testSet1new.tvc$TVC,
"Knn Predicted log10 TVC",
"knn Actual log10 TVC",
paste("Knn Rmse",Rmse.knn.HPLC.TVC.mean))
x11()
Actual_vs_predicted_plot(prediction.rf.HPLC.tvc,
testSet1new.tvc$TVC,
"RF Predicted log10 TVC",
"RF Actual log10 TVC",
paste("RN Rmse",Rmse.rf.HPLC.TVC.mean))
# Actual vs predicte for Psuedomonas Bacterial count
x11()
Actual_vs_predicted_plot(predication.knn.HPLC.Pseudomonads,
testSet1.pseudo$Pseudomonads,
"Knn Predicted log10 pseudomonas",
"knn Actual log10 pseudomonas",
paste("Knn Rmse",Rmse.knn.Pseudomonads.HPLC.mean))
x11()
Actual_vs_predicted_plot(prediction.rf.HPLC.Pseudomonads,
testSet1.pseudo$Pseudomonads,
"RF Predicted log10 psuedomonas",
"RF Actual log10 TVC",
paste("RN Rmse",Rmse.rf.Pseudomonads.HPLC.mean))
q()
q()
q()
knitr::opts_chunk$set(echo = TRUE)
# install required library
library(devtools)
devtools::install_github("sfirke/janitor")
# load Required libraries
library(tidyverse) # meta package of all tidyverse packages
library(janitor) #
# install required library
library(devtools)
devtools::install_github("sfirke/janitor")
# load Required libraries
library(tidyverse) # meta package of all tidyverse packages
library(janitor) #
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
QTrap_Semiquant_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_QTrap_Semiquant_Urine.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(Sample, contains(c("IU", "MU"))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
knitr::opts_chunk$set(echo = TRUE)
# install required library
library(devtools)
devtools::install_github("sfirke/janitor")
# load Required libraries
library(tidyverse) # meta package of all tidyverse packages
library(janitor) #
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
FAMES_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_FAMES_HM.csv.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(-`NUTRISHIELD Study II FAMES HM`, -String) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
FAMES_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_FAMES_HM.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(-`NUTRISHIELD Study II FAMES HM`, -String) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
FAMES_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_FAMES_HM.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(-NUTRISHIELD Study II FAMES HM, -String) %>%
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
FAMES_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_FAMES_HM.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(-String) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
View(FAMES_HM_Data)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
FAMES_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_FAMES_HM.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(-String, -contains("NUTRISHIELD")) %>%
select_if(~ !any(is.na(.))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
View(FAMES_HM_Data)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
FAMES_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_FAMES_HM.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(-String, -contains("NUTRISHIELD"),-starts_with("0")) %>%
select_if(~ !any(is.na(.))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
View(FAMES_HM_Data)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
FAMES_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_FAMES_HM.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(-String, -contains(c("NUTRISHIELD","X0"))) %>%
select_if(~ !any(is.na(.))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
View(FAMES_HM_Data)
knitr::opts_chunk$set(echo = TRUE)
# install required library
library(devtools)
devtools::install_github("sfirke/janitor")
# load Required libraries
library(tidyverse) # meta package of all tidyverse packages
library(janitor)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
SCFA_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_SCFA_Urine.csv",
sep = ";", skip = 3) %>%
# Finding specific pattern to select the sample from data set
select(Sample, contains(c("IU", "MU"))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
View(SCFA_Data)
knitr::opts_chunk$set(echo = TRUE)
# install required library
library(devtools)
devtools::install_github("sfirke/janitor")
# load Required libraries
library(tidyverse) # meta package of all tidyverse packages
library(janitor) #
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
QTrap_Semiquant_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_QTrap_Semiquant_Urine.csv",sep = ";", skip = 3) %>%
# Finding specific pattern to select the sample from data set
select(Sample, contains(c("IU", "MU"))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
View(QTrap_Semiquant_Data)
knitr::opts_chunk$set(echo = TRUE)
# install required library
library(devtools)
devtools::install_github("sfirke/janitor")
# load Required libraries
library(tidyverse) # meta package of all tidyverse packages
library(janitor) #
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
QTrap_Targetd_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_QTrap_Targeted_Urine.csv",sep = ";", skip = 3) %>%
# Finding specfic pattern to select the sample from dataset
select(Sample, contains(c("IU", "MU"))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
View(QTrap_Semiquant_Data)
View(FAMES_HM_Data)
View(SCFA_Data)
knitr::opts_chunk$set(echo = TRUE)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Thesis/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Thesis/Study2-Data/NUTRISHIELD_Study_II_MIRIS_HM.csv",sep = ";", skip = 3)%>%
# Finding specific pattern to select the sample from data set
select(-String, -contains(c("NUTRISHIELD","X0"))) %>%
select_if(~ !any(is.na(.))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1)
View(FAMES_HM_Data)
View(MIRIS_HM_Data)
View(SCFA_Data)
