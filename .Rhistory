skimmed_FAMES
check.constant.or.few.unique <- function(data) {
result <- vector("character", length = ncol(data))
for (i in 1:ncol(data)) {
column <- data[[i]]
if (length(unique(column)) == 1) {
result[i] <- "Constant value"
} else if (length(unique(column)) <= 10) {
result[i] <- "Few unique values"
} else {
result[i] <- "No pattern"
}
}
pattern_columns <- names(data)[result != "No pattern"]
return(pattern_columns)
}
results <- check.constant.or.few.unique(NSII_FAMES_HM)
print(results)
NSII_FAMES_HM <- NSII_FAMES_HM %>%
select(-Undecanoate,-Tridecanoate,-Tricosanoate,-Heneicosanoate,-Docosanoate,-`cis.10.Pentadecenoic`,-`cis.11.14.17.Eicosatrienoic`)
# Checking Skewness
skewness(NSII_FAMES_HM[2:30])
# Normailization of  data
Preprocess <- preProcess(NSII_FAMES_HM, method = "BoxCox")
# standardize the preprocessed data
NSII_FAMES_HM_Normal <- predict(Preprocess,NSII_FAMES_HM)
# Scaling of  data
Autoscale <- preProcess(NSII_FAMES_HM_Normal, method = c("center","scale"))
# standardize the preprocessed data
NSII_FAMES_HM_Normal_Scaled<- predict(Autoscale, NSII_FAMES_HM_Normal)
#NSII_FAMES_HM_Normal <- NSII_FAMES_HM_Normal %>%
#  replace(sapply(., is.infinite), 0) %>%
#  replace(sapply(.,is.na), 0)
skewness(NSII_FAMES_HM_Normal_Scaled[2:30])
skimmed_FAMES_Scale <- skim(NSII_FAMES_HM_Normal_Scaled)
skimmed_FAMES_Scale
# Converting it into long
NSII_FAMES_HM_Normal_Scaled.long <- gather(NSII_FAMES_HM_Normal_Scaled[2:15])
NSII_FAMES_HM_Normal_Scaled.long.subset <- gather(NSII_FAMES_HM_Normal_Scaled[16:30])
# box plot after distribution
NSII_FAMES_HM_Normal_Scaled.boxplot.A <- ggplot(NSII_FAMES_HM_Normal_Scaled.long, aes(x = value, y = key, fill = key))+
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
labs(title = "Scaled FAMES Data Boxplot",)
print(NSII_FAMES_HM_Normal_Scaled.boxplot.A)
# box plot after distribution
NSII_FAMES_HM_Normal_Scaled.boxplot.B <- ggplot(NSII_FAMES_HM_Normal_Scaled.long.subset, aes(x = value, y = key, fill = key))+
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
labs(title = "Scaled FAMES Data Boxplot",)
print(NSII_FAMES_HM_Normal_Scaled.boxplot.B)
NSII_FAMES_HM_Normal_Scaled_A <- NSII_FAMES_HM_Normal_Scaled[, c(1:15, 31)]
NSII_FAMES_HM_Normal_Scaled_B <- cbind(NSII_FAMES_HM_Normal_Scaled[1], NSII_FAMES_HM_Normal_Scaled[16:31])
str(NSII_FAMES_HM_Normal_Scaled_A)
# Define the boxplot function
boxplot <- function(data) {
data %>%
pivot_longer(cols = -c(Samples, NewClass), names_to = "feature", values_to = "value") %>%
ggplot(aes(x = NewClass, y = value, fill = NewClass)) +
geom_boxplot() +
facet_wrap(~ feature, scales = "free") +
labs(title = "Boxplot of NSII_FAMES_HM_Normal_Scaled",
x = "NewClass",
y = "Value")
}
# Create the boxplot for NSII_FAMES_HM_Normal_Scaled_A
NSII_FAMES_HM_Normal_Scaled_A_boxplot <- boxplot(NSII_FAMES_HM_Normal_Scaled_A)
print(NSII_FAMES_HM_Normal_Scaled_A_boxplot)
# Create the boxplot for NSII_FAMES_HM_Normal_Scaled_B
NSII_FAMES_HM_Normal_Scaled_B_boxplot <- boxplot(NSII_FAMES_HM_Normal_Scaled_B)
print(NSII_FAMES_HM_Normal_Scaled_B_boxplot)
# Calculate p-values for each correlation coefficient
p.mat <- cor_pmat(NSII_FAMES_HM_Normal_Scaled[3:27], method = "pearson")
# Calculate correlation matrix using Pearson correlation
correlationMatrix <- cor(NSII_FAMES_HM_Normal_Scaled[3:27], method = "pearson")
# Visualize the correlation matrix using ggcorrplot
ggcorrplot(
correlationMatrix,
hc.order = FALSE,   # Hierarchical clustering for reordering variables
type = "lower",    # Show only the lower triangle of the correlation matrix
lab = FALSE,        # Show labels for variables
p.mat = p.mat      # Overlay p-values on the plot
)
View(NSII_FAMES_HM_Normal_Scaled)
# Calculate p-values for each correlation coefficient
p.mat <- cor_pmat(NSII_FAMES_HM_Normal_Scaled[2:30], method = "pearson")
# Calculate correlation matrix using Pearson correlation
correlationMatrix <- cor(NSII_FAMES_HM_Normal_Scaled[3:30], method = "pearson")
# Visualize the correlation matrix using ggcorrplot
ggcorrplot(
correlationMatrix,
hc.order = FALSE,   # Hierarchical clustering for reordering variables
type = "lower",    # Show only the lower triangle of the correlation matrix
lab = FALSE,        # Show labels for variables
p.mat = p.mat      # Overlay p-values on the plot
)
# Calculate p-values for each correlation coefficient
p.mat <- cor_pmat(NSII_FAMES_HM_Normal_Scaled[2:30], method = "pearson")
# Calculate correlation matrix using Pearson correlation
correlationMatrix <- cor(NSII_FAMES_HM_Normal_Scaled[3:30], method = "pearson")
# Visualize the correlation matrix using ggcorrplot
ggcorrplot(
correlationMatrix,
hc.order = FALSE,   # Hierarchical clustering for reordering variables
type = "lower",    # Show only the lower triangle of the correlation matrix
lab = FALSE,        # Show labels for variables
p.mat = p_mat      # Overlay p-values on the plot
)
# Calculate p-values for each correlation coefficient
p_mat <- cor_pmat(NSII_FAMES_HM_Normal_Scaled[2:30], method = "pearson")
# Calculate correlation matrix using Pearson correlation
correlationMatrix <- cor(NSII_FAMES_HM_Normal_Scaled[3:30], method = "pearson")
# Visualize the correlation matrix using ggcorrplot
ggcorrplot(
correlationMatrix,
hc.order = FALSE,   # Hierarchical clustering for reordering variables
type = "lower",    # Show only the lower triangle of the correlation matrix
lab = FALSE        # Show labels for variables
)
library(rstatix)
# Get the names of the continuous variables
continuous.vars <- colnames(NSII_FAMES_HM_Normal_Scaled[2:30])
categorical.var <- "NewClass"
# Initialize an empty data frame to store the results
shapiro_results <- data.frame(Variable = character(0), P_Value = numeric(0), Significant = character(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
data_vector <- NSII_FAMES_HM_Normal_Scaled[[vars]]
shapiro_result <- shapiro.test(data_vector)
# Append the results to the data frame
shapiro_results <- rbind(shapiro_results, data.frame(Variable = vars, P_Value = shapiro_result$p.value, Significant = ifelse( shapiro_result$p.value < 0.05, "**", "-")))
}
library(rstatix)
# Get the names of the continuous variables
continuous_vars <- colnames(NSII_FAMES_HM_Normal_Scaled[2:30])
categorical_var <- "NewClass"
# Initialize an empty data frame to store the results
shapiro_results <- data.frame(Variable = character(0), P_Value = numeric(0), Significant = character(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
data_vector <- NSII_FAMES_HM_Normal_Scaled[[vars]]
shapiro_result <- shapiro.test(data_vector)
# Append the results to the data frame
shapiro_results <- rbind(shapiro_results, data.frame(Variable = vars, P_Value = shapiro_result$p.value, Significant = ifelse( shapiro_result$p.value < 0.05, "**", "-")))
}
print(shapiro_result)
View(shapiro_results)
# Catgorial variable to Factor
NSII_FAMES_HM_Normal_Scaled$NewClass <- factor(NSII_FAMES_HM_Normal_Scaled$NewClass)
# Initialize an empty data frame to store the results
levene_results <- data.frame(Variable = character(0), F_Value = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
var_test <- leveneTest(formula, data = NSII_FAMES_HM_Normal_Scaled)
levene_results <- rbind(levene_results, data.frame(Variable = vars, F_Value = var_test$`F value`, P_Value = var_test$`Pr(>F)`, Significant  = ifelse(var_test$`Pr(>F)` < 0.05, "**", "-")))
}
print(levene_results)
# Perform Kruskal-Wallis test for each variable
# Initialize an empty data frame to store the Kruskal-Wallis results
kruskal_results <- data.frame(Variable = character(0), H_Statistic = numeric(0), P_Value = numeric(0), stringsAsFactors = FALSE)
# Loop through the continuous variables
for (vars in continuous_vars) {
formula <- as.formula(paste(vars, "~", categorical_var))
kruskal_model <- kruskal.test(formula, data = NSII_FAMES_HM_Normal_Scaled)
# Append the results to the data frame
kruskal_results <- rbind(kruskal_results, data.frame(Variable = vars, H_Statistic = kruskal_model$statistic, P_Value = kruskal_model$p.value, Significant = ifelse(kruskal_model$p.value < 0.05, "**", "-")))
}
print(kruskal_results)
# Perform Kruskal-Wallis test for each variable
for (vars in continuous.vars) {
formula <- as.formula(paste(vars, "~", categorical.var))
pairwise_test <- dunn_test(formula, data = NSII_FAMES_HM_Normal_Scaled)
cat("Variable:", vars, "\n")
print(pairwise_test)
cat("\n")
}
View(kruskal_results)
for (var in continuous.vars) {
# Create a formula specifying the relationship between the continuous variable and the categorical variable
formula <- as.formula(paste(var, "~ NewClass"))
# Fit the linear regression model
regression.model <- lm(formula, data = NSII_FAMES_HM_Normal_Scaled)
# Print the regression coefficients and summary
cat("Variable:", var, "\n")
print(coef(regression.model))
cat("\n")
print(summary(regression.model))
cat("\n")
}
NSII_FAMES_HM_PCA <- prcomp(NSII_FAMES_HM_Normal_Scaled[3:27], scale. = TRUE, center = TRUE)
#Visualization of PCA
fviz_pca_ind(NSII_FAMES_HM_PCA,
geom = "point",
habillage = NSII_FAMES_HM_Normal_Scaled$NewClass,
palette = c("blue", "red","green","yellow"),
addEllipses = TRUE,
ellipse.type="confidence",
ggtheme = theme_bw(),
title = "PCA plot for HM Fatty Acids")
#Scree plot
fviz_eig(NSII_FAMES_HM_PCA,
addlabels = TRUE,
ylim = c(0, 70),
main="Scree Plot Fatty Acids")
#Graph for variable
fviz_pca_var(NSII_FAMES_HM_PCA, col.var = "red")
NSII_FAMES_HM_Normal_Scaled$NewClass <- factor(NSII_FAMES_HM_Normal_Scaled$NewClass)
# define the control using a random forest selection function
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(NSII_FAMES_HM_Normal_Scaled[,2:30], NSII_FAMES_HM_Normal_Scaled[,31], sizes=c(1:27), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
library(Boruta)
# Decide if a variable is important or not using Boruta
boruta_output <- Boruta(NewClass ~ ., data=na.omit(NSII_FAMES_HM_Normal_Scaled), doTrace=2)  # perform Boruta search
boruta_signif <- names(boruta_output$finalDecision[boruta_output$finalDecision %in% c("Confirmed", "Tentative")])  # collect Confirmed and Tentative variables
plot(boruta_output, cex.axis=.7, las=2, xlab="", main="Variable Importance")  # plot variable
knitr::opts_chunk$set(dev = "png",
dpi = 300,
echo = TRUE,
cache = FALSE)
# install required library
library(devtools)
devtools::install_github("sfirke/janitor")
#install.packages("DescTools")
#install.packages("skimr")
# load Required libraries
library(tidyverse) # meta package of all tidyverse packages
library(janitor) #
library(ggplot2)
library(corrplot)
library(ggcorrplot)
library(caret)
library(FactoMineR)
library(ggfortify)
library(factoextra)
library(moments)
library(reshape2)
library(ggbiplot)
library(skimr)
library(car)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",", skip = 2)
str(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
select(-Class) %>%
select_if(~ !any(is.na(.))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1) %>%
mutate_all(as.numeric)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",", skip = 2)
str(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
select(-Class) %>%
select_if(~ !any(is.na(.))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1) %>%
mutate_all(as.numeric)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",", skip = 2)
str(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
select(-Class) %>%
select_if(~ !any(is.na(.))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1) %>%
mutate_all(as.numeric)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",", skip = 2)
str(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
select_if(~ !any(is.na(.))) %>%
t() %>%
as.data.frame() %>%
row_to_names(1) %>%
mutate_all(as.numeric)
# assigning new names to the columns of the data frame
write.csv(MIRIS_HM_Data,"C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/Study2-clean-Data/NUTRISHIELD_Study_II_MIRIS_HM.csv")
str(MIRIS_HM_Data)
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",", skip = 2)
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",", skip = 1)
str(MIRIS_HM_Data)
str(MIRIS_HM_Data)
str(MIRIS_HM_Data)
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",")
str(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
t() %>%
as.data.frame()
skimmed_MIRIS <- skim(MIRIS_HM_Data)
skimmed_MIRIS
# check for Skewness
print("skewness Score")
skewness(MIRIS_HM_Data[2:7])
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",")
str(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
t() %>%
as.data.frame()
# assigning new names to the columns of the data frame
write.csv(MIRIS_HM_Data,"C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/Study2-clean-Data/NUTRISHIELD_Study_II_MIRIS_HM.csv")
View(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
t() %>%
as.data.frame()
View(MIRIS_HM_Data)
View(MIRIS_HM_Data)
skimmed_MIRIS <- skim(MIRIS_HM_Data)
skimmed_MIRIS
# check for Skewness
print("skewness Score")
skewness(MIRIS_HM_Data[2:7])
skimmed_MIRIS <- skim(MIRIS_HM_Data)
skimmed_MIRIS
# using caret lib to preprocess data
Normalization <- preProcess(MIRIS_HM_Data, method = c("BoxCox"),na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_normal <- predict(Normalization,MIRIS_HM_Data)
# using caret lib to preprocess data
standardise <- preProcess(MIRIS_HM_Data_normal, method = c("center","scale"),na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_scale <- predict(Normalization,MIRIS_HM_Data_normal)
MIRIS_HM_Data_scale[is.na(MIRIS_HM_Data_scale)] <- 0
# Skewness Score After Normalization
skewness(MIRIS_HM_Data_scale[2:7])
View(MIRIS_HM_Data_scale)
View(MIRIS_HM_Data_normal)
View(MIRIS_HM_Data_scale)
# using caret lib to preprocess data
Normalization <- preProcess(MIRIS_HM_Data, method = "BoxCox",na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_normal <- predict(Normalization,MIRIS_HM_Data)
View(MIRIS_HM_Data_normal)
# using caret lib to preprocess data
standardise <- preProcess(MIRIS_HM_Data_normal, method = c("center","scale"),na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_scale <- predict(Normalization,MIRIS_HM_Data_normal)
View(MIRIS_HM_Data_scale)
# using caret lib to preprocess data
Normalization <- preProcess(MIRIS_HM_Data, method = "YeoJohnson",na.remove = TRUE )
View(MIRIS_HM_Data_normal)
# Normalization the preprocessed data
MIRIS_HM_Data_normal <- predict(Normalization,MIRIS_HM_Data)
View(MIRIS_HM_Data_normal)
# using caret lib to preprocess data
Normalization <- preProcess(MIRIS_HM_Data, method = "YeoJohnson",na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_normal <- predict(Normalization,MIRIS_HM_Data)
View(MIRIS_HM_Data_normal)
# using caret lib to preprocess data
standardise <- preProcess(MIRIS_HM_Data_normal, method = c("center","scale"),na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_scale <- predict(Normalization,MIRIS_HM_Data_normal)
View(MIRIS_HM_Data_scale)
# Summary Stats after Normalization
skimmed_MIRIS_scale <- skim_to_list(MIRIS_HM_Data_scale)
skimmed_MIRIS_scale
# Assigning Class to Variable  according to information from sample ID
MIRIS_HM_Data_scale <- MIRIS_HM_Data_scale %>%
mutate(Class = case_when(grepl("^POST", Samples) ~ "post",
grepl("^PRE", Samples) ~ "pre",
grepl("^P", Samples) ~ "PI",
grepl("^T", Samples) ~ "TI",
TRUE ~ "other"
))
attach(MIRIS_HM_Data)
# Boxplot Function
boxplot <- function(data){
data %>%
gather(key = "feature", value = "value",-NewClass, -Samples, -Month, -ID) %>%
ggplot(aes(x = NewClass, y = value, fill = NewClass)) +
geom_boxplot() +
facet_wrap(~ feature, scales = "free") +
labs(x = "Group", y = "Value")
}
Milk_Boxplot <- boxplot(MIRIS_HM_Data_scale)
View(MIRIS_HM_Data_scale)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",")
str(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
t() %>%
as.data.frame()
# assigning new names to the columns of the data frame
write.csv(MIRIS_HM_Data,"C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/Study2-clean-Data/NUTRISHIELD_Study_II_MIRIS_HM.csv")
skimmed_MIRIS <- skim(MIRIS_HM_Data)
skimmed_MIRIS
skimmed_MIRIS <- skim(MIRIS_HM_Data)
skimmed_MIRIS
# using caret lib to preprocess data
Normalization <- preProcess(MIRIS_HM_Data, method = "YeoJohnson",na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_normal <- predict(Normalization,MIRIS_HM_Data)
# using caret lib to preprocess data
standardise <- preProcess(MIRIS_HM_Data_normal, method = c("center","scale"),na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_scale <- predict(Normalization,MIRIS_HM_Data_normal)
MIRIS_HM_Data_scale[is.na(MIRIS_HM_Data_scale)] <- 0
# Skewness Score After Normalization
skewness(MIRIS_HM_Data_scale[2:7])
# using caret lib to preprocess data
Normalization <- preProcess(MIRIS_HM_Data, method = "YeoJohnson",na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_normal <- predict(Normalization,MIRIS_HM_Data)
# using caret lib to preprocess data
standardise <- preProcess(MIRIS_HM_Data_normal, method = c("center","scale"),na.remove = TRUE )
# Normalization the preprocessed data
MIRIS_HM_Data_scale <- predict(Normalization,MIRIS_HM_Data_normal)
# Summary Stats after Normalization
skimmed_MIRIS_scale <- skim_to_list(MIRIS_HM_Data_scale)
skimmed_MIRIS_scale
# Boxplot Function
boxplot <- function(data){
data %>%
gather(key = "feature", value = "value",-NewClass, -Samples) %>%
ggplot(aes(x = NewClass, y = value, fill = NewClass)) +
geom_boxplot() +
facet_wrap(~ feature, scales = "free") +
labs(x = "Group", y = "Value")
}
Milk_Boxplot <- boxplot(MIRIS_HM_Data_scale)
# Boxplot Function
boxplot <- function(data){
data %>%
gather(key = "feature", value = "value", -Samples) %>%
ggplot(aes(x = NewClass, y = value, fill = NewClass)) +
geom_boxplot() +
facet_wrap(~ feature, scales = "free") +
labs(x = "Group", y = "Value")
}
Milk_Boxplot <- boxplot(MIRIS_HM_Data_scale)
View(MIRIS_HM_Data)
View(MIRIS_HM_Data_normal)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",")
str(MIRIS_HM_Data)
MIRIS_HM_Data <-  MIRIS_HM_Data %>%
# Finding specific pattern to select the sample from data set
t() %>%
as.data.frame()
# assigning new names to the columns of the data frame
write.csv(MIRIS_HM_Data,"C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/Study2-clean-Data/NUTRISHIELD_Study_II_MIRIS_HM.csv")
View(MIRIS_HM_Data)
t(MIRIS_HM_Data)
View(MIRIS_HM_Data)
MIRIS_HM_Data <- t(MIRIS_HM_Data)
View(MIRIS_HM_Data)
MIRIS_HM_Data <- as.data.frame(t(MIRIS_HM_Data))
View(MIRIS_HM_Data)
MIRIS_HM_Data <- as.data.frame(t(MIRIS_HM_Data))
View(MIRIS_HM_Data)
skimmed_MIRIS <- skim(MIRIS_HM_Data)
skimmed_MIRIS
View(MIRIS_HM_Data)
str(MIRIS_HM_Data)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",")
str(MIRIS_HM_Data)
MIRIS_HM_Data <- as.data.frame(t(MIRIS_HM_Data))
# assigning new names to the columns of the data frame
write.csv(MIRIS_HM_Data,"C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/Study2-clean-Data/NUTRISHIELD_Study_II_MIRIS_HM.csv")
View(MIRIS_HM_Data)
View(MIRIS_HM_Data)
MIRIS_HM_Data <- as.data.frame(t(MIRIS_HM_Data))
MIRIS_HM_Data <- as.numeric(MIRIS_HM_Data[2:7])
View(MIRIS_HM_Data)
# Set Working Directory
setwd("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/R-script/EDA_for_Human_Mother_Milk")
#load Data
MIRIS_HM_Data <- read.csv("C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/NSII_Corrected_and_Clean_Data/NSII_MIRIS_HM.csv",sep = ",")
str(MIRIS_HM_Data)
MIRIS_HM_Data <- MIRIS_HM_Data %>%
t() %>%
as.data.frame()
# assigning new names to the columns of the data frame
write.csv(MIRIS_HM_Data,"C:/Users/Parth Doshi/Dropbox/Nutrishield_Study_II_Project (ParthD thesis)/Study2-clean-Data/NUTRISHIELD_Study_II_MIRIS_HM.csv")
View(MIRIS_HM_Data)
View(MIRIS_HM_Data)
View(MIRIS_HM_Data)
